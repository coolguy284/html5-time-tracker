clicking set in edit view doesn't update chart view(?)
:hover overrides active or current tab, might even be the case for eventbtns as well
add hardcap of 32gb to localstorage test func to prevent blowup
add buttons in settings page to import/export storage data, without having to visit raw data page
eventpriority of event not in priority list should be higher than other events
somehow null text appears when clicking buttons in rawdataview (this happened before the hidden checkbox update)
add a basic ui persistence in html5-fancy-clock style, it should be a basic thing that doesnt care too much if a property is renamed cause it doesn't matter
  store state of toggles when unlogged mode active
  store state of toggles on every page and collapse event radiobuttons on chart page
edit page event / category json conversion is unnecessary for " and \ chars, replace them with spaces when checking

shift day forward or back in charts page, shift order; hide :00 and PM as checkbox as well
make localstorage sanity checker resilient to localstorage getting modified in background (or even in current tab (which will take more work unless just listening on storageupdate))
add setting for error if trying to edit a time or add a new time without marking it as estimate

add server-based synchronization and server-based event viewer
  setting events array and other stuff should send an "event" to the server update channel (if currently linked to a username / event set combination on the server for synchronizing multiple devices)
  can password protect a server update channel or hide it from public view
  server-based syncing extra info:
    low threshold to say there is a conflict and to view diffs / pick the primary version of each diff (annotated by which computer its from)
  broadcast component steps:
    add a broadcast page in extras and a listen to broadcast page or maybe seperate html file; pick mapping, pick broadcast events or categories, pick name, password, name publicly visible, store password in url optional; pick time to broadcast, options only this instant, past 24 hrs, past week, past month, past 3, 6, 12mths, or all time, or custom (and options for future events when those get added)
      include html5-fancy-clock in it somehow maybe
      option to silently replace some events or categories when broadcasting
        stored as checkon and offable rulesets, which can optionally be tied to a certain mapping

add filter searcher (keyboard that narrows results by substring match or substring match on initials of button texts), as filter element in buttons view, and a setting to show/hide filters
add monthly, yearly, etc, view

switch to array based list for event buttons
  store multi-events in planner memory as array

add async task mode for returnsameresult, in addition to stop or wait

extra files storage for old files
language for evaluating rules
use web lock api (if thats a thing) for critical saving stuff

add checkbox in settings page for compressed
add uncompressed events array in persistent storage
add setting for max num of uncompressed events before compress pass
add prediction page
  if you click predict will "predict" how long current event will go on for, showing a progress bar of when the event will end, updated continuously, while the event is ongoing; based on same event at similar time on past days, average over past 10 occurrences of event (configurable)

add warning of deleting data if version set to v1
can refresh when recalculating localstorage on mobile this is a bug
add saving indicator manager in addition to progress bar manager class
  and even tho not async saving now, set and unset the saving indicator now so when its async it will still work

double tap or hold to start a 2nd event in parallel with current one (or ones), also add an everything is a toggle mode probably turned on with a checkbox
auto update schedule table every minute if on latest week (requires recalculating parsedweeks, somehow do this efficiently)
switch between weekly and much bigger than weekly view (configurable, probably starting at present day, going back in groups of 30 or more); also have standard monthly view, and yearly view
duplicate event backwards should edit previously duplicated event if there is one
bulk 01 (pseudo-rawdataview):
  edit tab that has pseudo rawdataview where entries on newlines and human readable, also includes preconfig at top; when saving if format is wrong error message will be printed incl line num (add line nums to view for human readability, remove them in memory when parsing but add back to textarea if missing if error so error can be found)
  once storing binary data the raw data view will show hex with newline every x bytes
  raw data should also show string length and estimated storage use
  extras tab ideas
    also contain an extras file viewer thing to edit arbitrary binary data files not just the one actively being used in localstorage, will have 2 tabs for pseudorawdataview and actual data view (prob in hex cause binary, newlines at every x bytes); and obv buttons to load file and save to file
    button somewhere to export data, maybe on the extras page
  pseudo rawdataview could probably be a func on the localstorage object to get the formatted ver and and to set the formatted ver
  button called custom that prompts to add a custom event
  button on extras page or pseudorawdataview prob to check all events to make sure all events accounted for in the mappings, and also that all colors accounted for in the mappings as well
bulk 02 (format v2):
  also explain how the raw data is converted to an in memory representation
  also add filetype after versions, filetype 1 is main data, filetype 2 is special persistent data (and include this in file level flags actually to take up less space (filelevel meaning not per event))
  
  binary format:
    binary format should probably have some sort of minutes timezone flag but normally store timezone as hourly int offset (so one byte by default but sometimes 2)
      or zero bytes for timezone (it will have same value as previous entry)
    annotation presence is bool flag, but the flag is 3 bits long or smth because also has a length param could be 1 or 2 or 3 bytes length, at start of annotation
    timestamp can probably be 12 bytes unsigned with flag for long version of 16 bytes unsigned; units of millis since epoch which is when program was first released to make the number smaller
      use that now removed code that placed initial epoch for tables on 2023-09 smth, as the epoch
    those will actually be formats 1 and 2 of the timestamp, format 3 will be a 3 byte delta in ms able to represent 0-16,777.215 seconds after previous event, and format 4 will be 4 byte delta in ms able to represent 0-4,294,967.295 seconds after previous event (so virtually 100% of events will have very compact timestamp now)
    maybe if 128th place bit is high in flags byte it is a "blitz mode" entry that is flag byte, 3 or 4 byte offset, 1 byte event type
      (now that i type this, entries should be that by default if they qualify anyway)
    try gzipping or lzmaing whole thing
    have an index for most common annotations, probably for now manually added like event categories
    add signature to beginning of binary format, maybe "CG" then 0x01 meaning first program with binary (which is time planner)
    should store event name as str if not in table
    in binary format store bit size of events id and of category id in global flags (for event) and mapping flags (for category), and set it to minimum possible value automatically
  
  generic format accesser object, it even handles initial loading
    and will not auto upgrade the stored format, it will just keep accessing the old format
    but there will be a method to update the underlying format
    also maybe have some sort of way of synchronously saving backup data while an asynchronous save finishes, then deleting the backup data
  
  future increment of minor ver for adding compression, along with adding a settings object to file that stores how many X new events before compressing last X (but actually doing last 2X to X, leaving an uncompressed buffer in case of deletion)
  
  in far future, versions above 127 will be 2 byte version, utf8 style, and then keep on going with ver above 191 being 3 byte version, etc
  when saving file, add tiny saving... below current event, then saved! When it is done
  
  implement v2 spec setting for auto update format version, default is update minor version, can be dont update, or update major version
  the all stats view should be able to be split into eras/domains/regimens
    which is another var to add to v2 format, this can prob be an array of time/timestamp/stringname where everything after that counts as that era
bulk 03:
  cache sanity check value as well
    if localstorage is insane then the planner will not function so there needs to be a clean way to show that, most likely just have a top level div switcheroo going on
    and code execution should stop immediately at top of page if so
    add button to recalculate max space on that extras page, it deletes the sanity and max size caches and recalculates, if sanity is now false then do the div swap and its a big rip
    store experimentally derived max size in localstorage, use for percentage number and bar at top of extras page
    
    move all the localstorage funcs to library file at root folder
    
    possibly not doing:
      make storage tests synchronous cause why not, page needs the results to know whether to operate anyway
        since cached it doesn't even matter

big concepts:
change events list to be cleaner
  all events in one array along with priority or smth
  error in testing phase if all events are not given a group
move to a json based v2 of the format
  it will have 2 versions of the same format, a json format called format 2, and a binary format 2b that also has compression (either deflate or ppmd) and stuff
    binary format
      time can be stored as i64 milliseconds since epoch
      boolean flags can all go in one byte
  backtemporal
    add flag to track if event array is "clean" or if it might have backtemporal events
      might not be needed if duplicate event backwards always checks anyway
      if purges are run then backtemporal check not needed, so this would set the clean flag after the purges
  store events list in the saved data
    also store some convenience things like which tab currently on, scrolling state for all tabs, etc.
  should store version of program (or maybe program hash) and if it changed, auto take backup of the thing in localstorage, saved to another localstorage entry like _backup_xx (x going from 1 upwards) (do this after confirmation prompt in case user doesnt feel like it)
  make upgrade routine (that probably saves a backup or at least asks to)
make page / phase screens for the different events that would be in different phases of life
stats and tables for day, week, month, year, past 30 days (and every 30 days before that), past 90 days, all time
ghostly blocks for future events, and maybe have stats about how close correlation is between future events that have now passed and present events (so you can feel bad about yourself (i joke i hope))
  this obviously implies adding some way to add future events, probably a weekly schedule thing that can be revised live, but stores old revisions in the main event history once the event has passed (with a special flag of course)
    or maybe store it as a seperate array where, as long as events list is not modified, new events are not added for efficiency, so maybe just keep track of old versions of planned events list
  maybe also daily and monthly planning at the same time (daily for sleep for example) or yearly or one time planning (for break schedules) and ability to switch between 2 or more different schedules, like switching to break schedule on one time scheduled thanksgiving and other breaks

extra:
prompt user to save edit page if click off when edit, or if hide events or other data toggled when edit
  this can be a setting to toggle off this behavior
add era support, make storage page show certain things (kb/day, days till full; bytes/event) only in current era
3.1 binary and beyond steps
  reorder 3.0 memory format to use array for evts but preserve old version array quirks
  3.1 format
  3.1 binary format
  on-line syncing

low tier:
fix extreme digits of precision for table div heights and repeating linear gradient sections
fix table's stripe bars being raster images basically (due to repeating-linear-gradient), convert them to svgs instead either with css or manually making an svg element using javascript
when a new event is added and data_div is scrolled to the bottom, scroll it to the new bottom; same goes for checking and unchecking 'collapse event groups'
allow more than 1 event in some cases
add ability to annotate previous or second previous entry
darken button that is active, like current tab, current event
color button that cannot be clicked a disabled color (for week picker)
fix coloring of charts page
make percentage stats box not unicode chars and actual div instead
fix mobile seperation of stats percentage entries being greater than 0
merge duplicate groups when converting many events to groups
duplicate evt backwards should check if duplicate will go before the previous event's time, prompt to delete previous event if so
add check integrity of data button
  checks for backtemporal events, and others stuff
trim events that last a few seconds, replace with next event, at least do this for short periods of decreasing events, then nothing, then increasing events
do some thinking to make localstorage test binary search a mathematically perfect binary search and not double check powers of 2 or something
when obviously annotation is added to dup evt backwards prompt then run the other function with it (all letters and spaces and >=7 chars length)
make validator for eventbuttons, eventpriorities, eventmappings
  look through all of them to get the list of all events (this can be a func in persistentstorage cause its useful for binary) then check to see if mappings, priorities, or buttons are missing some events; also check all categories have a color and (optionally) no unnecessary categories or events anywhere
v2 spec setting for auto update format version, default is update minor version, can be dont update, or update major version
add annotation viewer page to extras that will show annotations and allow the option to convert some of the shown misc w. annotation into true events
  maybe this page can also just be an event manager page that lets you rename events and combine 2 identical events as well
add a move events backward button
store eventbuttons as an array instead so there can be multiple keys with the same value
rename repo to html5-time-tracker
convert true/false funcs into undefined/error, its much cleaner (primarily in persistentstorage)
ui updates afterRenderEnterListeners are called before render finishes
add event for alleventsupdate to consolidate triple refreshing
mutually exclusive:
  no label for= is set for labels in eventbuttons
    it automatically applies to input elements inside a label element anyway (i think), so this is low prio
  OR
  remove all label for= if input is inside label as it is implicit anyway (i think)
date object to keep track of and add dates, and when asked for the milliseconds utc of midnight it gets the time zone that was midnight local time on that day
  or alternatively (configurable thru a setting) it uses midnight local time for the current timezone (which changes with dst as handled natively by the date object)
convert fillparsedwks/mths to getparsedweeks/months, and the fillall func sets the object parameters to the results of the getfuncs
proper modal for purge removed entries and purge backtemporal (and other future purges) that shows what will be purged with yes/no at bottom
optional encryption for binary format, sha256 the password then use it for aes gcm 256 (configurable in far future)
advanced storage page should show estimate till full in date & time to minute as well as just days away
add help tab at bottom with ... help
  tutorial
  explanation of purpose
make purge backtemporal entries into delete backtemporal entries instead

probably not doing:
try black border around events in table view
negative event ids for special ids

probably not fixable:
fix lag on raw data page every time clicked now
